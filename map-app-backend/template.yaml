AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  map-app-backend

  SAM Template for map-app-backend

Globals:
  Function:
    Timeout: 30

Resources:
  MappAppAPI:
    Type: "AWS::Serverless::Api"
    Properties:
      Name: "MapAppAPI"
      StageName: "dev"
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # User table and functions
  MapAppUserTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "MapAppUserTable"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  GetUserFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/user/get-user"
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_TABLE: !Ref MapAppUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppUserTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user/{userId}
            Method: get
            RestApiId: !Ref MappAppAPI
  UpdateUserFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/user/update-user"
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_TABLE: !Ref MapAppUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppUserTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /user/{userId}
            Method: put
            RestApiId: !Ref MappAppAPI
  DeleteUserFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/user/delete-user"
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref MapAppUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppUserTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MapAppUserTable"
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: delete
            RestApiId: !Ref MappAppAPI

  # List table and functions
  MapAppListTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "MapAppListTable"
      AttributeDefinitions:
        - AttributeName: "listId"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "listId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: userId-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  GetListFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/get-list"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppListTable
      Events:
        GetList:
          Type: Api
          Properties:
            Path: /list/{listId}
            Method: get
            RestApiId: !Ref MappAppAPI
  ScanListsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/scan-lists"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppListTable
      Events:
        ScanLists:
          Type: Api
          Properties:
            Path: /lists
            Method: get
            RestApiId: !Ref MappAppAPI
  CreateListFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/create-list"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppListTable
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppListTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppListTable
      Events:
        CreateListApiEvent:
          Type: Api
          Properties:
            Path: /list
            Method: post
            RestApiId: !Ref MappAppAPI
  UpdateListFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/update-list"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppListTable
      Events:
        UpdateListApiEvent:
          Type: Api
          Properties:
            Path: /list/{listId}
            Method: put
            RestApiId: !Ref MappAppAPI
  RemovePlaceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/remove-place"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
          PLACE_TABLE: !Ref MapAppPlacesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppListTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppPlacesTable
      Events:
        UpdateListApiEvent:
          Type: Api
          Properties:
            Path: /list/{listId}/remove-place/{placeId}/user/{userId}
            Method: put
            RestApiId: !Ref MappAppAPI

  DeleteListFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/list/delete-list"
      Architectures:
        - x86_64
      Environment:
        Variables:
          LIST_TABLE: !Ref MapAppListTable
          PLACE_TABLE: !Ref MapAppPlacesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppListTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MapAppPlacesTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MapAppListTable"
      Events:
        DeleteListApiEvent:
          Type: Api
          Properties:
            Path: /list/delete-list/{listId}/user/{userId}
            Method: put
            RestApiId: !Ref MappAppAPI

  # # List table and functions
  MapAppPlacesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "MapAppPlacesTable"
      AttributeDefinitions:
        - AttributeName: "placeId"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "placeId"
          KeyType: "HASH"
        - AttributeName: "userId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  GetPlaceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/place/get-place"
      Architectures:
        - x86_64
      Environment:
        Variables:
          PLACE_TABLE: !Ref MapAppPlacesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppPlacesTable
      Events:
        GetPlace:
          Type: Api
          Properties:
            Path: /place/{placeId}/user/{userId}
            Method: get
            RestApiId: !Ref MappAppAPI
  ScanPlacesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/place/scan-places"
      Architectures:
        - x86_64
      Environment:
        Variables:
          PLACES_TABLE: !Ref MapAppPlacesTable
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppPlacesTable
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppListTable
      Events:
        ScanPlaces:
          Type: Api
          Properties:
            Path: /places
            Method: get
            RestApiId: !Ref MappAppAPI
  CreatePlaceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/place/create-place"
      Architectures:
        - x86_64
      Environment:
        Variables:
          PLACE_TABLE: !Ref MapAppPlacesTable
          LIST_TABLE: !Ref MapAppListTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppPlacesTable
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppPlacesTable
      Events:
        CreatePlaceApiEvent:
          Type: Api
          Properties:
            Path: /place
            Method: post
            RestApiId: !Ref MappAppAPI
  UpdatePlaceFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      CodeUri: "./functions/place/update-place"
      Architectures:
        - x86_64
      Environment:
        Variables:
          PLACE_TABLE: !Ref MapAppPlacesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MapAppPlacesTable
        - DynamoDBWritePolicy:
            TableName: !Ref MapAppPlacesTable
      Events:
        UpdatePlaceApiEvent:
          Type: Api
          Properties:
            Path: /place/{placeId}
            Method: put
            RestApiId: !Ref MappAppAPI
  # DeletePlaceFunction:
  #   Type: "AWS::Serverless::Function"
  #   Properties:
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs20.x
  #     CodeUri: "./functions/place/delete-place"
  #     Architectures:
  #       - x86_64
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MapAppPlacesTable
  #     Policies:
  #       - DynamoDBReadPolicy:
  #           TableName: !Ref MapAppPlacesTable
  #       - DynamoDBWritePolicy:
  #           TableName: !Ref MapAppPlacesTable
  #       - DynamoDBDeletePolicy:
  #           TableName: !Ref MapAppPlacesTable
  #     Events:
  #       DeletePlaceApiEvent:
  #         Type: Api
  #         Properties:
  #           Path: /place
  #           Method: delete
  #           RestApiId: !Ref MappAppAPI

Outputs:
  MapAppApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for MapApp API"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/dev"
    Export:
      Name: MapAppAPI

  #  User Table outputs
  MapAppUserTableName:
    Description: "The name of the User table"
    Value: !Ref MapAppUserTable

  GetUserApi:
    Description: "API Gateway endpoint URL for Get User function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/{userId}/"
  GetUserFunctionArn:
    Description: "ARN of the GetUser Lambda function"
    Value: !GetAtt GetUserFunction.Arn
  GetUserFunctionIamRole:
    Description: "Implicit IAM Role created for Get User function"
    Value: !GetAtt GetUserFunctionRole.Arn

  UpdateUserApi:
    Description: "API Gateway endpoint URL for Update User function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/{userId}/"
  UpdateUserFunctionArn:
    Description: "ARN of the UpdateUser Lambda function"
    Value: !GetAtt UpdateUserFunction.Arn
  UpdateUserFunctionIamRole:
    Description: "Implicit IAM Role created for Update User function"
    Value: !GetAtt UpdateUserFunctionRole.Arn

  DeleteUserApi:
    Description: "API Gateway endpoint URL for Delete User function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/{userId}/"
  DeleteUserFunctionArn:
    Description: "ARN of the DeleteUser Lambda function"
    Value: !GetAtt DeleteUserFunction.Arn
  DeleteUserFunctionIamRole:
    Description: "Implicit IAM Role created for Delete User function"
    Value: !GetAtt DeleteUserFunctionRole.Arn

  # List Table outputs
  MapAppListTableName:
    Description: "The name of the List table"
    Value: !Ref MapAppListTable

  GetListApi:
    Description: "API Gateway endpoint URL for Get List function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/{listId}/"
  GetListFunctionArn:
    Description: "ARN of the GetList Lambda function"
    Value: !GetAtt GetListFunction.Arn
  GetListFunctionIamRole:
    Description: "Implicit IAM Role created for Get List function"
    Value: !GetAtt GetListFunctionRole.Arn

  ScanListsApi:
    Description: "API Gateway endpoint URL for Scan Lists function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/lists/"
  ScanListsFunctionArn:
    Description: "ARN of the ScanLists Lambda function"
    Value: !GetAtt ScanListsFunction.Arn
  ScanListsFunctionIamRole:
    Description: "Implicit IAM Role created for Scan Lists function"
    Value: !GetAtt ScanListsFunctionRole.Arn

  CreateListApi:
    Description: "API Gateway endpoint URL for Create List function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/"
  CreateListFunctionArn:
    Description: "ARN of the CreateList Lambda function"
    Value: !GetAtt CreateListFunction.Arn
  CreateListFunctionIamRole:
    Description: "Implicit IAM Role created for Create List function"
    Value: !GetAtt CreateListFunctionRole.Arn

  UpdateListApi:
    Description: "API Gateway endpoint URL for Update List function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/"
  UpdateListFunctionArn:
    Description: "ARN of the UpdateList Lambda function"
    Value: !GetAtt UpdateListFunction.Arn
  UpdateListFunctionIamRole:
    Description: "Implicit IAM Role created for Update List function"
    Value: !GetAtt UpdateListFunctionRole.Arn

  RemovePlaceApi:
    Description: "API Gateway endpoint URL for Remove Place function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/{listId}/remove-place/{placeId}/"
  RemovePlaceFunctionArn:
    Description: "ARN of the RemovePlace Lambda function"
    Value: !GetAtt RemovePlaceFunction.Arn

  DeleteListApi:
    Description: "API Gateway endpoint URL for Delete List function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/"
  DeleteListFunctionArn:
    Description: "ARN of the DeleteList Lambda function"
    Value: !GetAtt DeleteListFunction.Arn
  DeleteListFunctionIamRole:
    Description: "Implicit IAM Role created for Delete List function"
    Value: !GetAtt DeleteListFunctionRole.Arn

  # Place Table outputs
  MapAppPlacesTableName:
    Description: "The name of the Place table"
    Value: !Ref MapAppPlacesTable

  CreatePlaceApi:
    Description: "API Gateway endpoint URL for Create Place function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/place/"
  CreatePlaceFunctionArn:
    Description: "ARN of the CreatePlace Lambda function"
    Value: !GetAtt CreatePlaceFunction.Arn
  CreatePlaceFunctionIamRole:
    Description: "Implicit IAM Role created for Create Place function"
    Value: !GetAtt CreatePlaceFunctionRole.Arn

  ScanPlacesApi:
    Description: "API Gateway endpoint URL for Scan Places function"
    Value: !Sub "https://${MappAppAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/places/"
  ScanPlacesFunctionArn:
    Description: "ARN of the ScanPlaces Lambda function"
    Value: !GetAtt ScanPlacesFunction.Arn
